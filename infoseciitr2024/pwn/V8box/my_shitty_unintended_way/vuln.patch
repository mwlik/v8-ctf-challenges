From dd6cd956e058d04c0d72c7915ec38e7e38f834b5 Mon Sep 17 00:00:00 2001
From: Manas <ghandatmanas@gmail.com>
Date: Thu, 12 Dec 2024 20:46:19 +0530
Subject: [PATCH] kek

---
 src/d8/d8.cc                 | 10 +++--
 src/flags/flag-definitions.h |  2 +-
 src/sandbox/testing.cc       | 77 ++++++++++++++++++++++++++++++++++++
 3 files changed, 84 insertions(+), 5 deletions(-)

diff --git a/src/d8/d8.cc b/src/d8/d8.cc
index ef81fbe0b80..70d248e5faa 100644
--- a/src/d8/d8.cc
+++ b/src/d8/d8.cc
@@ -2297,9 +2297,10 @@ MaybeLocal<Context> Shell::CreateRealm(
     }
     delete[] old_realms;
   }
-  Local<ObjectTemplate> global_template = CreateGlobalTemplate(isolate);
+  // Local<ObjectTemplate> global_template = CreateGlobalTemplate(isolate);
   Local<Context> context =
-      Context::New(isolate, nullptr, global_template, global_object);
+      // Context::New(isolate, nullptr, global_template, global_object);
+      Context::New(isolate, nullptr, ObjectTemplate::New(isolate), global_object);
   if (context.IsEmpty()) return MaybeLocal<Context>();
   DCHECK(!try_catch.HasCaught());
   InitializeModuleEmbedderData(context);
@@ -4147,9 +4148,10 @@ MaybeLocal<Context> Shell::CreateEvaluationContext(Isolate* isolate) {
       reinterpret_cast<i::Isolate*>(isolate)->main_thread_local_isolate(),
       context_mutex_.Pointer());
   // Initialize the global objects
-  Local<ObjectTemplate> global_template = CreateGlobalTemplate(isolate);
+  // Local<ObjectTemplate> global_template = CreateGlobalTemplate(isolate);
   EscapableHandleScope handle_scope(isolate);
-  Local<Context> context = Context::New(isolate, nullptr, global_template);
+  // Local<Context> context = Context::New(isolate, nullptr, global_template);
+  Local<Context> context = Context::New(isolate, nullptr, ObjectTemplate::New(isolate));
   if (context.IsEmpty()) {
     DCHECK(isolate->IsExecutionTerminating());
     return {};
diff --git a/src/flags/flag-definitions.h b/src/flags/flag-definitions.h
index 644c0983958..9d93ed5779b 100644
--- a/src/flags/flag-definitions.h
+++ b/src/flags/flag-definitions.h
@@ -2870,7 +2870,7 @@ DEFINE_NEG_IMPLICATION(sandbox_fuzzing, sandbox_testing)
 DEFINE_NEG_IMPLICATION(sandbox_testing, sandbox_fuzzing)
 
 #ifdef V8_ENABLE_MEMORY_CORRUPTION_API
-DEFINE_BOOL(expose_memory_corruption_api, false,
+DEFINE_BOOL(expose_memory_corruption_api, true,
             "Exposes the memory corruption API. Set automatically by "
             "--sandbox-testing and --sandbox-fuzzing.")
 DEFINE_IMPLICATION(sandbox_fuzzing, expose_memory_corruption_api)
diff --git a/src/sandbox/testing.cc b/src/sandbox/testing.cc
index 8bc740937af..fbd2a7c0282 100644
--- a/src/sandbox/testing.cc
+++ b/src/sandbox/testing.cc
@@ -411,6 +411,79 @@ void SandboxGetFieldOffset(const v8::FunctionCallbackInfo<v8::Value>& info) {
   info.GetReturnValue().Set(offset);
 }
 
+// Sandbox.getPIELeak
+void SandboxGetPIELeak(const v8::FunctionCallbackInfo<v8::Value>& info){
+  DCHECK(ValidateCallbackInfo(info));
+  double leak = (double)((unsigned long int)(&SandboxGetPIELeak) >> 32 << 32);
+  info.GetReturnValue().Set(v8::Number::New(info.GetIsolate(), leak));
+}
+
+// Sandbox.leakIsolate(offset) -> double
+void SandboxLeakIsolate(const v8::FunctionCallbackInfo<v8::Value>& info){
+  static int leaked = 0;
+  
+  if(leaked != 0){
+    info.GetReturnValue().Set(v8::Boolean::New(info.GetIsolate(), false));
+    return;
+  }
+
+  DCHECK(ValidateCallbackInfo(info));
+  if(info.Length() != 1){
+    info.GetReturnValue().Set(v8::Boolean::New(info.GetIsolate(), false));
+    return;
+  }
+
+  v8::Isolate* isolate = info.GetIsolate();
+  v8::Local<v8::Context> context = isolate->GetCurrentContext();
+
+  Local<v8::Integer> offset;
+  if(!info[0]->ToInteger(context).ToLocal(&offset)){
+    info.GetReturnValue().Set(v8::Boolean::New(info.GetIsolate(), false));
+    return;
+  }
+
+  void *addr = (void *)(offset->Value() + isolate);
+  double leak = *(double *)addr;
+
+  leaked = 1;
+  info.GetReturnValue().Set(v8::Number::New(info.GetIsolate(), leak));
+}
+
+// Sandbox.ArbMemoryWrite(addr, value) -> Bool
+void ArbMemoryWrite(const v8::FunctionCallbackInfo<v8::Value>& info) {
+  static int written_data = 0;
+  if(written_data != 0){
+    info.GetReturnValue().Set(v8::Boolean::New(info.GetIsolate(), false));
+    return;
+  }
+
+  DCHECK(ValidateCallbackInfo(info));
+
+  v8::Isolate* isolate = info.GetIsolate();
+  Local<v8::Context> context = isolate->GetCurrentContext();
+  
+  if(info.Length() != 2){
+    isolate->ThrowError("Expects two BigInt argument (address and value)");
+    info.GetReturnValue().Set(v8::Boolean::New(info.GetIsolate(), false));
+    return;
+  }
+
+  Local<v8::BigInt> arg1, arg2;
+  if (!info[0]->ToBigInt(context).ToLocal(&arg1) ||
+      !info[1]->ToBigInt(context).ToLocal(&arg2)) {
+    isolate->ThrowError("Expects two BigInt argument (address and value)");
+    return;
+  }
+
+  uint64_t *address = (uint64_t *)arg1->Uint64Value();
+  uint64_t value = arg2->Uint64Value();
+
+  *address = value;
+  written_data = 1;
+  info.GetReturnValue().Set(v8::Boolean::New(info.GetIsolate(), true));
+}
+
+
 Handle<FunctionTemplateInfo> NewFunctionTemplate(
     Isolate* isolate, FunctionCallback func,
     ConstructorBehavior constructor_behavior) {
@@ -505,6 +578,10 @@ void SandboxTesting::InstallMemoryCorruptionApi(Isolate* isolate) {
                   "getInstanceTypeIdFor", 1);
   InstallFunction(isolate, sandbox, SandboxGetFieldOffset, "getFieldOffset", 2);
 
+  InstallGetter(isolate, sandbox, SandboxGetPIELeak, "getPIELeak");
+  InstallFunction(isolate, sandbox, SandboxLeakIsolate, "leakIsolate", 1);
+  InstallFunction(isolate, sandbox, ArbMemoryWrite, "arbMemoryWrite", 2);
+
   // Install the Sandbox object as property on the global object.
   Handle<JSGlobalObject> global = isolate->global_object();
   Handle<String> name =
-- 
2.43.0

